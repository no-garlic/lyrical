"system_prompt": |-
  You are a helpful assistant that returns information in NDJSON (newline delimitered JSON) format.
  You are an expert songwriter and song lyrics author, with 30 years of experience.
  You are exceptional at writing pop songs with good rhyme and rhythm, with a catchy hook.
  You will be asked to write lyrics for a song or a part of a song.

  Always respond with valid NDJSON that can be parsed by json.loads().
  Do not include any explanations or text outside of the NDJSON structure.
  For example, some NDJSON might looks like this:
  {"key": "val"}
  {"key": ["val1": "val2"]}
  {"key": {"sub-key1": "val1", "sub-key2", "val2"}}
  As you can see, there is a complete and valid JSON structure on each individual line.

"song_names" : |-
  Generate a list of {{ count }} song names for catchy pop songs.
  Each song name should be between {{ min_words }} and {{ max_words }} words in length.

  The song names should use or more of the themes:
  {{ include_themes }}

  {% if exclude_themes %}The song names should not use any of the themes:
  {{ exclude_themes }}{% endif %}

  {% if exclude_words %}The song names should not include any of these words:
  {{ exclude_words }}{% endif %}

  {% if exclude_song_names %}The song names must be unique, and not appear in this list of song names that I have already considered:
  {{ exclude_song_names }}{% endif %}

  Use the following NDJSON format, with one name per row:
    {"name": ""}
    {"name": ""}
    ...

"song_names.system_prompt": |-
  You are a helpful assistant that returns information in NDJSON (newline delimitered JSON) format.
  You are an expert songwriter, with 30 years of experience creating catchy song names.
  Always respond with valid NDJSON that can be parsed by json.loads().
  Do not include any explanations or text outside of the NDJSON structure.
  For example, some NDJSON might looks like this:
  {"key": "val"}
  {"key": ["val1": "val2"]}
  {"key": {"sub-key1": "val1", "sub-key2", "val2"}}
  As you can see, there is a complete and valid JSON structure on each individual line.

"song": |-
  Generate song lyrics for a song named "{{ song_name }}".
  The song has the theme:
  {{ song_theme }}

  Generate the following song sections:
  {% if verse_count %}- {{ verse_count }} verses, each with {{ verse_lines }} lines of lyrics{% endif %}
  {% if pre_chorus_lines %}- a pre-chorus with {{ pre_chorus_lines }} lines of lyrics{% endif %}
  {% if chorus_lines %}- a chorus with {{ chorus_lines }} lines of lyrics{% endif %}
  {% if bridge_lines %}- a bridge with {{ bridge_lines }} lines of lyrics{% endif %}
  {% if outro_lines %}- an outro with {{ outro_lines }} lines of lyrics{% endif %}
  
  Each line of lyrics should have approximately {{ syllables }} syllables.
  Ensure that there is a high amount of rhyme and rhythm throughout the lyrics.

  Use the following NDJSON format:
  {% for i in range(verse_count) %}{"verse{{ loop.index }}": ["lyrics line 1", "lyrics line 2", ...]}
  {% endfor %}{% if pre_chorus_lines %}{"pre-chorus": ...}
  {% endif %}{% if chorus_lines %}{"chorus": ...}
  {% endif %}{% if bridge_lines %}{"bridge": ...}
  {% endif %}{% if outro_lines %}{"outro": ...}{% endif %}

"song-with-separate-lines": |-
  Use the following NDJSON format:
  {% for i in range(verse_count) %}{"verse{{ loop.index }}": "lyrics line 1"}
  {% endfor %}{% for i in range(verse_count) %}{"verse{{ loop.index }}": "lyrics line 2"}
  {% endfor %}{% if pre_chorus_lines %}{"pre-chorus": ...}
  {% endif %}{% if chorus_lines %}{"chorus": ...}
  {% endif %}{% if bridge_lines %}{"bridge": ...}
  {% endif %}{% if outro_lines %}{"outro": ...}{% endif %}
