"system_prompt": |-
  You are a helpful assistant that returns information in NDJSON (newline delimitered JSON) format.
  You are an expert songwriter and song lyrics author, with 30 years of experience.
  You are exceptional at writing pop songs with good rhyme and rhythm, with a catchy hook.
  You will be asked to write lyrics for a song or a part of a song.

  Always respond with valid NDJSON that can be parsed by json.loads().
  Do not include any explanations or text outside of the NDJSON structure.
  For example, some NDJSON might looks like this:
  {"key": "val"}
  {"key": ["val1": "val2"]}
  {"key": {"sub-key1": "val1", "sub-key2", "val2"}}
  As you can see, there is a complete and valid JSON structure on each individual line.

"song_names" : |-
  Generate a list of {{ count }} song names for catchy pop songs.
    I want a variety of different length song names, each between {{ min_words }} and {{ max_words }} words in length.

  {% if include_themes %}The song names MUST use or more of the themes:
  [{{ include_themes }}]{% endif %}

  {% if exclude_themes %}The song names MUST NOT use any of the themes:
  [{{ exclude_themes }}]{% endif %}

  {% if include_words %}The song names MUST include one or more of these words:
  [{{ include_words }}]{% endif %}

  {% if exclude_words %}The song names should not include any of these words:
  [{{ exclude_words }}]{% endif %}

  {% if exclude_song_names %}The song names MUST BE UNIQUE, and MUST NOT appear in this list:
  {{ exclude_song_names }}]{% endif %}

  {% if starts_with %}The song names MUST start with the word(s): '{{ starts_with }}'{% endif %}
  {% if ends_with %}The song names MUST end with the word(s): '{{ ends_with }}'{% endif %}

  Use Title Case for song names, where every word starts with an uppercase letter.

  Use the following NDJSON format, with one name per row:
    {"name": "From The Ashes"}
    {"name": "How To Shine"}
    ...

"song_names.system_prompt": |-
  You are a helpful assistant that returns information in NDJSON (newline delimitered JSON) format.
  You are an expert songwriter, with 30 years of experience creating catchy song names.
  Always respond with valid NDJSON that can be parsed by json.loads().
  Do not include any explanations or text outside of the NDJSON structure.
  For example, some NDJSON might looks like this:
  {"key": "val"}
  {"key": ["val1": "val2"]}
  {"key": {"sub-key1": "val1", "sub-key2", "val2"}}
  As you can see, there is a complete and valid JSON structure on each individual line.

"song": |-
  Generate song lyrics for a song named "{{ song_name }}".
  The song has the theme:
  {{ song_theme }}

  Generate the following song sections:
  {% if verse_count %}- {{ verse_count }} verses, each with {{ verse_lines }} lines of lyrics
  {% endif %}{% if pre_chorus_lines %}- a pre-chorus with {{ pre_chorus_lines }} lines of lyrics
  {% endif %}{% if chorus_lines %}- a chorus with {{ chorus_lines }} lines of lyrics
  {% endif %}{% if bridge_lines %}- a bridge with {{ bridge_lines }} lines of lyrics
  {% endif %}{% if outro_lines %}- an outro with {{ outro_lines }} lines of lyrics
  {% endif %}{% if vocalisation_lines %}- a vocalisation section with {{ vocalisation_lines }} lines of lyrics{% endif %}
    
  Each line of lyrics should have approximately {{ syllables }} syllables.
  Ensure that there is a high amount of rhyme and rhythm throughout the lyrics.

  {% if vocalisation_lines %}Vocalisation lines should be complete lines, for example ooh-ooh-ooh, ah-ah, whoa.
  vocalisation lines may be shorter then {{ syllables }} syllables.
  {%  if vocalisation_terms %}Only use the vocalisation terms: [{{ vocalisation_terms }}]{% endif %}{% else %}{% endif %} 

  {% if song_vocalisation_level %}
  Also add a {{song_vocalisation_level}} amount of vocalisation to the song lyrics, at the start or end of the lines of lyrics.
  Lead singer vocalisation is written as a part of the lyrics, eg: "Whoa, oh, the sunshine is here" or "take me higher, ooh-ah".
  Backing singer vocalisation is written in brackets, eg: "The world is mine! (oh-oh-oh)".
  {% endif %}

  {% if (song_vocalisation_level or vocalisation_lines) and vocalisation_terms %}
  Only use the vocalisation terms: [{{ vocalisation_terms }}].
  {% endif %} 

  Use the following NDJSON format:
  {"<section>": "<lyrics>"}
  {"<section>": "<lyrics>"}
  ...

  The <section> is one of:
  {% for i in range(verse_count) %}- "verse{{ loop.index }}"
  {% endfor %}{% if pre_chorus_lines %}- "pre-chorus"
  {% endif %}{% if chorus_lines %}- "chorus"
  {% endif %}{% if bridge_lines %}- "bridge"
  {% endif %}{% if outro_lines %}- "outro"
  {% endif %}{% if vocalisation_lines %}- "vocalisation"{% endif %}

  The <lyrics> is a single line of lyrics for the section, so ther will be multiple JSON lines for each section, one for each line of the section.
  

"song-format-2": |-
  {% for i in range(verse_count) %}{"verse{{ loop.index }}": ["lyrics line 1", "lyrics line 2", ...]}
  {% endfor %}{% if pre_chorus_lines %}{"pre-chorus": ...}
  {% endif %}{% if chorus_lines %}{"chorus": ...}
  {% endif %}{% if bridge_lines %}{"bridge": ...}
  {% endif %}{% if outro_lines %}{"outro": ...}{% endif %}

"song-with-separate-lines": |-
  Use the following NDJSON format:
  {% for i in range(verse_count) %}{"verse{{ loop.index }}": "lyrics line 1"}
  {% endfor %}{% for i in range(verse_count) %}{"verse{{ loop.index }}": "lyrics line 2"}
  {% endfor %}{% if pre_chorus_lines %}{"pre-chorus": ...}
  {% endif %}{% if chorus_lines %}{"chorus": ...}
  {% endif %}{% if bridge_lines %}{"bridge": ...}
  {% endif %}{% if outro_lines %}{"outro": ...}{% endif %}
