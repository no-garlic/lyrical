# Generated by Django 5.2 on 2025-04-15 00:03

import random
from django.db import migrations
from django.utils import timezone
import datetime


def add_data(apps, schema_editor):
    # Get the models
    quiz_attempt_model = apps.get_model('quizly', 'QuizAttempt')
    quiz_model = apps.get_model('quizly', 'Quiz')
    user_model = apps.get_model('quizly', 'User')
    answer_model = apps.get_model('quizly', 'Answer')
    users = list(user_model.objects.exclude(username='admin'))
    quizzes = list(quiz_model.objects.all())
    
    # Get the current date and time
    now = timezone.now()

    # Track how many quizzes the test user has attempted
    test_user_num_quizzes = 0
    
    # Loop through all quizzes and users to create quiz attempts
    for quiz in quizzes:
        for user in users:
            # People have attempted only half of the quizzes
            if random.randint(0, 1) == 1:
                continue

            # All users other than the test user will only attempt each quiz once
            number_of_attempts = 1

            # Setup user id=2 as a test user, that has less data than the rest
            if user.id == 2:
                if random.randint(0, 10) != 1:
                    continue
                if test_user_num_quizzes == 8:
                    continue
                test_user_num_quizzes += 1
                number_of_attempts = random.randint(2, 4) // 2

            # Generate random date between quiz creation and now
            time_diff = (now - quiz.created_at).total_seconds()
            random_seconds = random.randint(0, int(time_diff))
            random_date = quiz.created_at + datetime.timedelta(seconds=random_seconds)

            # Add multiple attempts for the same quiz
            for attempt in range(number_of_attempts):

                # Subsequent attempts are 1-3 days after the previous attempt
                if attempt > 0:
                    random_date += datetime.timedelta(days=random.randint(1, 3))

                # Determine which questions are correct and incorrect
                score = 0
                answers = []
                questions = quiz.questions.all()
                for question in questions:
                        soution = question.solution if random.randint(0, 3) != 0 else random.randint(1, 4)
                        score += 1 if soution == question.solution else 0
                        answers.append({
                        'question': question,
                        'selected_answer': soution
                        })

                # Create the quiz attempt record
                quiz_attempt = quiz_attempt_model.objects.create(
                    user=user,
                    quiz=quiz,
                    score=score,
                    date_taken=random_date,
                )

                # Create the answer records
                for answer in answers:
                    answer_model.objects.create(
                        quiz_attempt=quiz_attempt,
                        question=answer['question'],
                        answer=answer['selected_answer']
                    )

    
def remove_data(apps, schema_editor):
    quiz_attempt_model = apps.get_model('quizly', 'QuizAttempt')
    quiz_attempt_model.objects.all().delete()
    

class Migration(migrations.Migration):

    dependencies = [
        ("quizly", "0005_add_quizzes"),
    ]

    operations = [
        migrations.RunPython(add_data, reverse_code=remove_data)
    ]
