{
    "Python" : [
        {
            "name" : "Python Basics for Beginners",
            "description" : "This quiz covers fundamental Python concepts including data types, control flow, and basic syntax. Test your understanding of Python's core features and programming principles to ensure you have a solid foundation.",
            "questions" : [
                {
                    "text" : "What is the correct way to create a variable named 'age' with the value 25 in Python?",
                    "hint" : "Python doesn't require type declarations when creating variables.",
                    "option1" : "age = 25",
                    "option2" : "var age = 25",
                    "option3" : "int age = 25",
                    "option4" : "age := 25",
                    "solution" : "1"
                },
                {
                    "text" : "Which of the following is NOT a built-in data type in Python?",
                    "hint" : "Think about basic data structures that require importing a module in Python.",
                    "option1" : "List",
                    "option2" : "Dictionary",
                    "option3" : "Array",
                    "option4" : "Tuple",
                    "solution" : "3"
                },
                {
                    "text" : "What does the 'len()' function do in Python?",
                    "hint" : "This function operates on various collections and sequence types.",
                    "option1" : "Returns the largest number in a list",
                    "option2" : "Returns the length of an object",
                    "option3" : "Converts a string to lowercase",
                    "option4" : "Returns the data type of an object",
                    "solution" : "2"
                },
                {
                    "text" : "How do you create a comment in Python?",
                    "hint" : "Comments are used to make code more readable but are not executed.",
                    "option1" : "/* Comment */",
                    "option2" : "// Comment",
                    "option3" : "# Comment",
                    "option4" : "<!-- Comment -->",
                    "solution" : "3"
                },
                {
                    "text" : "What is the output of print(type(5.0))?",
                    "hint" : "The decimal point is significant for determining the data type.",
                    "option1" : "<class 'int'>",
                    "option2" : "<class 'float'>",
                    "option3" : "<class 'number'>",
                    "option4" : "<class 'double'>",
                    "solution" : "2"
                },
                {
                    "text" : "Which operator is used for exponentiation in Python?",
                    "hint" : "This operator raises a number to a power.",
                    "option1" : "^",
                    "option2" : "**",
                    "option3" : "*^",
                    "option4" : "^^",
                    "solution" : "2"
                },
                {
                    "text" : "What is the correct way to import a module named 'math' in Python?",
                    "hint" : "Importing allows you to use functions defined in other Python files.",
                    "option1" : "import math",
                    "option2" : "#include <math>",
                    "option3" : "using math",
                    "option4" : "include math",
                    "solution" : "1"
                },
                {
                    "text" : "How do you open a file named 'data.txt' for reading in Python?",
                    "hint" : "The open() function takes a filename and a mode parameter.",
                    "option1" : "open('data.txt', 'write')",
                    "option2" : "open('data.txt', 'r')",
                    "option3" : "file('data.txt', 'read')",
                    "option4" : "file = open('data.txt')",
                    "solution" : "2"
                }
            ]
        },
        {
            "name": "Advanced Python Data Structures and Algorithms",
            "description": "Challenge your understanding of Python's advanced data structures and algorithmic concepts. This quiz focuses on collections, iterators, generators, and algorithm implementation techniques that are essential for efficient Python programming.",
            "questions": [
                {
                    "text": "Which Python data structure would be most efficient for implementing a LIFO (Last-In-First-Out) pattern?",
                    "hint": "Think about which collection type naturally supports adding and removing elements from the same end.",
                    "option1": "list",
                    "option2": "queue",
                    "option3": "deque",
                    "option4": "stack",
                    "solution": "1"
                },
                {
                    "text": "What is the time complexity of accessing an element by key in a Python dictionary?",
                    "hint": "Hash tables are designed for specific performance characteristics.",
                    "option1": "O(n)",
                    "option2": "O(log n)",
                    "option3": "O(1)",
                    "option4": "O(n log n)",
                    "solution": "3"
                },
                {
                    "text": "Which of the following is a generator expression in Python?",
                    "hint": "Generator expressions use different brackets than list comprehensions.",
                    "option1": "[x*2 for x in range(10)]",
                    "option2": "{x*2 for x in range(10)}",
                    "option3": "(x*2 for x in range(10))",
                    "option4": "<x*2 for x in range(10)>",
                    "solution": "3"
                },
                {
                    "text": "What will collections.Counter(['a', 'b', 'b', 'c', 'b']) return?",
                    "hint": "Counter creates a dictionary-like object with special counting behavior.",
                    "option1": "['a', 'b', 'b', 'c', 'b']",
                    "option2": "{'a': 1, 'b': 3, 'c': 1}",
                    "option3": "3",
                    "option4": "['b', 'b', 'b', 'a', 'c']",
                    "solution": "2"
                },
                {
                    "text": "Which method would you use to sort a list in-place in Python?",
                    "hint": "Some methods modify the original list while others return a new list.",
                    "option1": "sorted()",
                    "option2": "sort()",
                    "option3": "order()",
                    "option4": "arrange()",
                    "solution": "2"
                },
                {
                    "text": "What is the output of set([1, 2, 2, 3, 3, 3, 4])?",
                    "hint": "Sets have a special property regarding duplicate elements.",
                    "option1": "[1, 2, 2, 3, 3, 3, 4]",
                    "option2": "{1, 2, 3, 4}",
                    "option3": "[1, 2, 3, 4]",
                    "option4": "(1, 2, 3, 4)",
                    "solution": "2"
                },
                {
                    "text": "Which of these is NOT a valid way to create an iterator in Python?",
                    "hint": "Iterator creation follows specific patterns in Python.",
                    "option1": "iter([1, 2, 3])",
                    "option2": "iterator([1, 2, 3])",
                    "option3": "(x for x in range(3))",
                    "option4": "enumerate([1, 2, 3])",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of the heapq module in Python?",
                    "hint": "This module implements a specific type of priority queue data structure.",
                    "option1": "To implement hash tables",
                    "option2": "To implement binary search trees",
                    "option3": "To implement heap queue algorithm",
                    "option4": "To implement linked lists",
                    "solution": "3"
                }
            ]
        },
        {
            "name": "Python Web Development Fundamentals",
            "description": "Explore Python's web development capabilities including frameworks, HTTP concepts, and API development. This quiz tests your understanding of building web applications with Python.",
            "questions": [
                {
                    "text": "Which Python web framework follows the MTV (Model-Template-View) architecture?",
                    "hint": "This popular framework was created by the Django Software Foundation.",
                    "option1": "Flask",
                    "option2": "Django",
                    "option3": "FastAPI",
                    "option4": "Pyramid",
                    "solution": "2"
                },
                {
                    "text": "What is WSGI in Python web development?",
                    "hint": "It defines how web servers communicate with Python applications.",
                    "option1": "Web Server Gateway Interface",
                    "option2": "Web Socket Gateway Implementation",
                    "option3": "Web Service Global Interface",
                    "option4": "Web Server General Integration",
                    "solution": "1"
                },
                {
                    "text": "Which HTTP method is typically used for retrieving data from a server?",
                    "hint": "This method is considered 'safe' as it doesn't modify server data.",
                    "option1": "POST",
                    "option2": "PUT",
                    "option3": "DELETE",
                    "option4": "GET",
                    "solution": "4"
                },
                {
                    "text": "What is the purpose of the requests library in Python?",
                    "hint": "It simplifies making HTTP requests to web services.",
                    "option1": "To create web servers",
                    "option2": "To send HTTP requests",
                    "option3": "To parse HTML",
                    "option4": "To manage databases",
                    "solution": "2"
                },
                {
                    "text": "Which templating engine is used by default in Flask?",
                    "hint": "This engine uses {% %} for control structures and {{ }} for expressions.",
                    "option1": "Mako",
                    "option2": "Jinja2",
                    "option3": "Chameleon",
                    "option4": "Django Templates",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of Cross-Origin Resource Sharing (CORS) in web development?",
                    "hint": "It relates to security policies for web requests from different domains.",
                    "option1": "To compress data transfers",
                    "option2": "To enable sharing between different origins",
                    "option3": "To encrypt web traffic",
                    "option4": "To cache web resources",
                    "solution": "2"
                },
                {
                    "text": "Which Python package is commonly used for handling JSON Web Tokens (JWT)?",
                    "hint": "This package helps with encoding and decoding JWTs.",
                    "option1": "pyjwt",
                    "option2": "jsonwebtoken",
                    "option3": "jwt-python",
                    "option4": "python-jwt",
                    "solution": "1"
                },
                {
                    "text": "What is the purpose of the @app.route decorator in Flask?",
                    "hint": "It associates URL patterns with view functions.",
                    "option1": "To authenticate users",
                    "option2": "To handle URL routing",
                    "option3": "To validate form data",
                    "option4": "To create database models",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "Python Testing and Debugging",
            "description": "Master Python testing frameworks and debugging techniques. This quiz tests your knowledge of unit testing, debugging tools, and best practices for ensuring code quality in Python applications.",
            "questions": [
                {
                    "text": "Which Python module is commonly used for unit testing?",
                    "hint": "This module is part of Python's standard library for testing.",
                    "option1": "test",
                    "option2": "unittest",
                    "option3": "pytest",
                    "option4": "testcase",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of the pdb module in Python?",
                    "hint": "This module helps during development by allowing code inspection.",
                    "option1": "Performance profiling",
                    "option2": "Package distribution",
                    "option3": "Interactive debugging",
                    "option4": "Database management",
                    "solution": "3"
                },
                {
                    "text": "Which statement is used to deliberately raise an exception in Python?",
                    "hint": "This keyword is used when you want to trigger an exception.",
                    "option1": "throw",
                    "option2": "raise",
                    "option3": "except",
                    "option4": "error",
                    "solution": "2"
                },
                {
                    "text": "What is a mock object in testing?",
                    "hint": "These objects simulate behavior of real objects in controlled ways.",
                    "option1": "A real object used for testing",
                    "option2": "A simulated object that mimics real object behavior",
                    "option3": "A database snapshot",
                    "option4": "A type of test case",
                    "solution": "2"
                },
                {
                    "text": "Which assertion tests if a function raises an exception?",
                    "hint": "This assertion is specifically for verifying exception handling.",
                    "option1": "assertRaises()",
                    "option2": "assertException()",
                    "option3": "assertError()",
                    "option4": "assertThrows()",
                    "solution": "1"
                },
                {
                    "text": "What is the purpose of the coverage.py tool?",
                    "hint": "This tool helps measure the effectiveness of tests.",
                    "option1": "To measure code performance",
                    "option2": "To measure test code coverage",
                    "option3": "To detect syntax errors",
                    "option4": "To format code",
                    "solution": "2"
                },
                {
                    "text": "Which decorator is used to mark a test method in unittest?",
                    "hint": "This identifies individual test cases within a test class.",
                    "option1": "@test",
                    "option2": "@testcase",
                    "option3": "@unittest",
                    "option4": "@testmethod",
                    "solution": "1"
                },
                {
                    "text": "What is a test fixture in Python testing?",
                    "hint": "This helps set up the environment for testing.",
                    "option1": "A type of assertion",
                    "option2": "A baseline test case",
                    "option3": "A set of resources needed for tests",
                    "option4": "A test report format",
                    "solution": "3"
                }
            ]
        }
    ],
    "JavaScript": [
        {
            "name": "JavaScript Fundamentals and DOM Manipulation",
            "description": "Test your knowledge of core JavaScript concepts and DOM manipulation techniques. This quiz covers variables, functions, events, and essential browser-based programming skills needed for modern web development.",
            "questions": [
                {
                    "text": "Which of the following is the correct way to declare a variable in modern JavaScript?",
                    "hint": "Consider which declaration keyword is recommended in modern JavaScript for variables that may be reassigned.",
                    "option1": "var x = 10;",
                    "option2": "let x = 10;",
                    "option3": "const x = 10;",
                    "option4": "variable x = 10;",
                    "solution": "2"
                },
                {
                    "text": "What does the 'DOM' stand for in JavaScript?",
                    "hint": "It refers to the browser's representation of a web page.",
                    "option1": "Document Object Model",
                    "option2": "Data Object Model",
                    "option3": "Document Oriented Markup",
                    "option4": "Digital Object Management",
                    "solution": "1"
                },
                {
                    "text": "Which method is used to add an event listener to an HTML element?",
                    "hint": "This method attaches an event handler function to an element.",
                    "option1": "element.attachEvent()",
                    "option2": "element.addEventListener()",
                    "option3": "element.addEvent()",
                    "option4": "element.listenTo()",
                    "solution": "2"
                },
                {
                    "text": "What is the correct way to check if 'x' equals 5 in value and type?",
                    "hint": "JavaScript has operators that check both value and type.",
                    "option1": "x = 5",
                    "option2": "x == 5",
                    "option3": "x === 5",
                    "option4": "x.equals(5)",
                    "solution": "3"
                },
                {
                    "text": "Which function is used to parse a string to an integer in JavaScript?",
                    "hint": "This function converts a string to a whole number.",
                    "option1": "Integer.parse()",
                    "option2": "parseInteger()",
                    "option3": "parseInt()",
                    "option4": "Number.toInteger()",
                    "solution": "3"
                },
                {
                    "text": "What does the 'this' keyword refer to in JavaScript?",
                    "hint": "The value depends on how a function is called.",
                    "option1": "The current function",
                    "option2": "The global window object",
                    "option3": "The object that owns the executing code",
                    "option4": "The parent element in the DOM",
                    "solution": "3"
                },
                {
                    "text": "Which method is used to select an element by its ID in the DOM?",
                    "hint": "This is the most direct way to find an element with a specific ID attribute.",
                    "option1": "querySelector('#id')",
                    "option2": "getElementById('id')",
                    "option3": "findElementById('id')",
                    "option4": "selectElement('id')",
                    "solution": "2"
                },
                {
                    "text": "What is the output of: console.log(typeof []);",
                    "hint": "JavaScript has some surprising type classifications.",
                    "option1": "array",
                    "option2": "object",
                    "option3": "list",
                    "option4": "undefined",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "Modern JavaScript ES6+ Features",
            "description": "Test your knowledge of modern JavaScript features introduced in ES6 and beyond. This quiz covers arrow functions, destructuring, promises, and other contemporary JavaScript concepts essential for modern web development.",
            "questions": [
                {
                    "text": "What is the correct way to define an arrow function?",
                    "hint": "Arrow functions provide a concise syntax for function expressions.",
                    "option1": "function() => {}",
                    "option2": "() => {}",
                    "option3": "=> () {}",
                    "option4": "function => ()",
                    "solution": "2"
                },
                {
                    "text": "Which feature allows unpacking values from arrays or properties from objects?",
                    "hint": "This ES6 feature provides a concise way to extract multiple values.",
                    "option1": "Spreading",
                    "option2": "Destructuring",
                    "option3": "Mapping",
                    "option4": "Extraction",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of the 'async' keyword in JavaScript?",
                    "hint": "It's related to handling asynchronous operations.",
                    "option1": "Makes a function run faster",
                    "option2": "Marks a function that returns a Promise",
                    "option3": "Creates a new thread",
                    "option4": "Blocks function execution",
                    "solution": "2"
                },
                {
                    "text": "Which operator is used for spreading elements?",
                    "hint": "This operator expands arrays or objects into their elements.",
                    "option1": "...",
                    "option2": "***",
                    "option3": ">>>",
                    "option4": "===",
                    "solution": "1"
                },
                {
                    "text": "What is a template literal in JavaScript?",
                    "hint": "It provides a way to embed expressions in strings.",
                    "option1": "A string using single quotes",
                    "option2": "A string using backticks",
                    "option3": "A regular expression",
                    "option4": "A type of comment",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "JavaScript Asynchronous Programming",
            "description": "Master asynchronous programming concepts in JavaScript. This quiz tests your understanding of promises, async/await, callbacks, and event handling patterns.",
            "questions": [
                {
                    "text": "What is a Promise in JavaScript?",
                    "hint": "It represents a future value or completion of an asynchronous operation.",
                    "option1": "A guarantee that code will execute quickly",
                    "option2": "An object representing a future value",
                    "option3": "A type of function",
                    "option4": "A way to store data",
                    "solution": "2"
                },
                {
                    "text": "Which method is used to handle Promise rejection?",
                    "hint": "This method handles errors in Promise chains.",
                    "option1": "then()",
                    "option2": "catch()",
                    "option3": "finally()",
                    "option4": "error()",
                    "solution": "2"
                },
                {
                    "text": "What does the 'await' keyword do?",
                    "hint": "It's used with async functions to handle Promises.",
                    "option1": "Stops code execution completely",
                    "option2": "Waits for a Promise to resolve",
                    "option3": "Creates a new Promise",
                    "option4": "Cancels a Promise",
                    "solution": "2"
                },
                {
                    "text": "Which event loop phase handles Promise callbacks?",
                    "hint": "Promises have special handling in the event loop.",
                    "option1": "Call stack",
                    "option2": "Microtask queue",
                    "option3": "Task queue",
                    "option4": "Event queue",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of Promise.all()?",
                    "hint": "It helps work with multiple Promises together.",
                    "option1": "Executes Promises in sequence",
                    "option2": "Waits for all Promises to resolve",
                    "option3": "Cancels all Promises",
                    "option4": "Creates multiple Promises",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "JavaScript Design Patterns",
            "description": "Explore common JavaScript design patterns and architectural concepts. This quiz covers module patterns, singleton, factory, observer patterns and other design principles used in JavaScript applications.",
            "questions": [
                {
                    "text": "What is the Module pattern in JavaScript?",
                    "hint": "It's related to encapsulation and privacy.",
                    "option1": "A way to import external code",
                    "option2": "A pattern for creating private variables and methods",
                    "option3": "A type of loop",
                    "option4": "A way to define classes",
                    "solution": "2"
                },
                {
                    "text": "Which pattern is used to ensure only one instance of a class exists?",
                    "hint": "This pattern restricts instantiation to a single object.",
                    "option1": "Factory",
                    "option2": "Singleton",
                    "option3": "Observer",
                    "option4": "Decorator",
                    "solution": "2"
                },
                {
                    "text": "What is the Observer pattern primarily used for?",
                    "hint": "It involves subjects and observers in a notification system.",
                    "option1": "Data storage",
                    "option2": "Event handling and notification",
                    "option3": "Object creation",
                    "option4": "Code organization",
                    "solution": "2"
                },
                {
                    "text": "What is the main purpose of the Factory pattern?",
                    "hint": "It's about object creation and flexibility.",
                    "option1": "To create multiple copies of an object",
                    "option2": "To create objects without exposing creation logic",
                    "option3": "To modify existing objects",
                    "option4": "To share object properties",
                    "solution": "2"
                },
                {
                    "text": "Which pattern decouples data from its presentation?",
                    "hint": "This pattern separates concerns in application architecture.",
                    "option1": "Singleton",
                    "option2": "MVC",
                    "option3": "Factory",
                    "option4": "Prototype",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "JavaScript Testing and Debugging",
            "description": "Learn essential JavaScript testing and debugging techniques. This quiz covers testing frameworks, debugging tools, error handling, and best practices for ensuring code quality in JavaScript applications.",
            "questions": [
                {
                    "text": "Which tool is commonly used for unit testing in JavaScript?",
                    "hint": "This is a popular testing framework with a focus on behavior-driven development.",
                    "option1": "ESLint",
                    "option2": "Jest",
                    "option3": "Webpack",
                    "option4": "Babel",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of console.trace()?",
                    "hint": "It helps with debugging by providing specific information.",
                    "option1": "Prints a variable's value",
                    "option2": "Shows the current stack trace",
                    "option3": "Measures execution time",
                    "option4": "Counts function calls",
                    "solution": "2"
                },
                {
                    "text": "How do you create a test suite in Jest?",
                    "hint": "This function groups related tests together.",
                    "option1": "test.group()",
                    "option2": "describe()",
                    "option3": "suite()",
                    "option4": "group()",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of the debugger statement?",
                    "hint": "It's used during development for debugging.",
                    "option1": "Finds bugs automatically",
                    "option2": "Creates a breakpoint in code",
                    "option3": "Removes debugging code",
                    "option4": "Logs errors to console",
                    "solution": "2"
                },
                {
                    "text": "Which method is used for cleanup in Jest tests?",
                    "hint": "This runs after each test case.",
                    "option1": "afterTest()",
                    "option2": "afterEach()",
                    "option3": "cleanup()",
                    "option4": "finish()",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "JavaScript Performance Optimization",
            "description": "Explore techniques for optimizing JavaScript code performance. This quiz covers memory management, efficient algorithms, best practices for performance, and common optimization patterns.",
            "questions": [
                {
                    "text": "What is event delegation in JavaScript?",
                    "hint": "It's a pattern for efficient event handling.",
                    "option1": "Creating multiple event listeners",
                    "option2": "Handling events at a parent element",
                    "option3": "Removing event listeners",
                    "option4": "Blocking events from propagating",
                    "solution": "2"
                },
                {
                    "text": "Which method is most efficient for iterating over arrays?",
                    "hint": "Consider performance implications of different loop types.",
                    "option1": "for...in",
                    "option2": "for loop",
                    "option3": "forEach",
                    "option4": "while loop",
                    "solution": "2"
                },
                {
                    "text": "What causes memory leaks in JavaScript?",
                    "hint": "Think about references and cleanup.",
                    "option1": "Using too many variables",
                    "option2": "Unclosed event listeners",
                    "option3": "Using modern JavaScript features",
                    "option4": "Using strict mode",
                    "solution": "2"
                },
                {
                    "text": "What is debouncing used for?",
                    "hint": "It helps control the rate of function execution.",
                    "option1": "Speeding up functions",
                    "option2": "Limiting function call frequency",
                    "option3": "Debugging code",
                    "option4": "Loading resources",
                    "solution": "2"
                },
                {
                    "text": "Which operation is most expensive in JavaScript?",
                    "hint": "Think about DOM operations vs. regular JavaScript operations.",
                    "option1": "Array operations",
                    "option2": "DOM manipulation",
                    "option3": "String concatenation",
                    "option4": "Math calculations",
                    "solution": "2"
                }
            ]
        }
    ],
    "Java": [
        {
            "name": "Java Core Concepts and Syntax",
            "description": "Test your understanding of Java programming fundamentals including object-oriented principles, syntax, and common APIs. This quiz covers essential Java concepts that every developer should know.",
            "questions": [
                {
                    "text": "Which of the following is NOT a valid Java access modifier?",
                    "hint": "Consider the standard visibility modifiers in Java.",
                    "option1": "public",
                    "option2": "private",
                    "option3": "friend",
                    "option4": "protected",
                    "solution": "3"
                },
                {
                    "text": "What is the entry point of a Java application?",
                    "hint": "This is the specific method that gets called when a Java program starts.",
                    "option1": "public static void main(String[] args)",
                    "option2": "public void main(String[] args)",
                    "option3": "public static main(String[] args)",
                    "option4": "public static void start(String[] args)",
                    "solution": "1"
                },
                {
                    "text": "Which collection type maintains insertion order and allows duplicates?",
                    "hint": "Think about basic collection interfaces and their implementing classes.",
                    "option1": "HashSet",
                    "option2": "HashMap",
                    "option3": "ArrayList",
                    "option4": "TreeSet",
                    "solution": "3"
                },
                {
                    "text": "What is the result of 15 / 2 in Java?",
                    "hint": "Consider how Java handles division between integer types.",
                    "option1": "7.5",
                    "option2": "7",
                    "option3": "8",
                    "option4": "7.0",
                    "solution": "2"
                },
                {
                    "text": "Which keyword is used to inherit a class in Java?",
                    "hint": "This keyword establishes an 'is-a' relationship between classes.",
                    "option1": "extends",
                    "option2": "implements",
                    "option3": "inherits",
                    "option4": "using",
                    "solution": "1"
                },
                {
                    "text": "What is the default value of an uninitialized instance variable of type int?",
                    "hint": "Java initializes instance variables with default values based on their type.",
                    "option1": "1",
                    "option2": "null",
                    "option3": "0",
                    "option4": "undefined",
                    "solution": "3"
                },
                {
                    "text": "Which of these is NOT a valid primitive data type in Java?",
                    "hint": "Java has eight primitive data types.",
                    "option1": "boolean",
                    "option2": "String",
                    "option3": "char",
                    "option4": "byte",
                    "solution": "2"
                },
                {
                    "text": "What happens when a checked exception is not caught or declared with 'throws'?",
                    "hint": "Java requires handling certain types of exceptions.",
                    "option1": "The program will run but with unexpected behavior",
                    "option2": "The program will compile but throw a RuntimeException",
                    "option3": "The program will not compile",
                    "option4": "Nothing, checked exceptions are optional to handle",
                    "solution": "3"
                }
            ]
        },
        {
            "name": "Java Collections Framework Deep Dive",
            "description": "Master Java's Collections Framework including Lists, Sets, Maps, and their implementations. This quiz tests your understanding of collection interfaces, implementations, and best practices for data structure selection.",
            "questions": [
                {
                    "text": "Which collection type should be used when elements must be unique and sorted?",
                    "hint": "Think about Set implementations that maintain order.",
                    "option1": "HashSet",
                    "option2": "TreeSet",
                    "option3": "LinkedHashSet",
                    "option4": "ArrayList",
                    "solution": "2"
                },
                {
                    "text": "What is the time complexity of adding an element to a LinkedList?",
                    "hint": "Consider where the element is being added in the list.",
                    "option1": "O(1) at both ends",
                    "option2": "O(n) always",
                    "option3": "O(log n)",
                    "option4": "O(1) only at the end",
                    "solution": "1"
                },
                {
                    "text": "Which Map implementation maintains insertion order?",
                    "hint": "One implementation specifically preserves the order of entry insertion.",
                    "option1": "HashMap",
                    "option2": "TreeMap",
                    "option3": "LinkedHashMap",
                    "option4": "Hashtable",
                    "solution": "3"
                },
                {
                    "text": "What is the primary difference between Collection and Collections?",
                    "hint": "One is an interface, the other provides utility methods.",
                    "option1": "Collection is a class, Collections is an interface",
                    "option2": "Collection is an interface, Collections is a utility class",
                    "option3": "They are the same thing",
                    "option4": "Collections extends Collection",
                    "solution": "2"
                },
                {
                    "text": "Which collection type is thread-safe by default?",
                    "hint": "Most collections aren't thread-safe, but some legacy ones are.",
                    "option1": "ArrayList",
                    "option2": "HashMap",
                    "option3": "Vector",
                    "option4": "LinkedList",
                    "solution": "3"
                }
            ]
        },
        {
            "name": "Java Concurrency and Multithreading",
            "description": "Explore Java's concurrency utilities and multithreading capabilities. This quiz covers thread management, synchronization, concurrent collections, and the executor framework.",
            "questions": [
                {
                    "text": "What is the purpose of the synchronized keyword in Java?",
                    "hint": "It's related to thread safety and mutual exclusion.",
                    "option1": "To make variables static",
                    "option2": "To prevent multiple threads from executing a block simultaneously",
                    "option3": "To combine multiple methods into one",
                    "option4": "To improve performance",
                    "solution": "2"
                },
                {
                    "text": "Which interface should be implemented to create a thread in Java?",
                    "hint": "There are two main ways to create threads, this is one of them.",
                    "option1": "Thread",
                    "option2": "Runnable",
                    "option3": "Threadable",
                    "option4": "Executable",
                    "solution": "2"
                },
                {
                    "text": "What is a deadlock in Java?",
                    "hint": "It's a situation involving multiple threads and resources.",
                    "option1": "When a thread terminates unexpectedly",
                    "option2": "When two or more threads are blocked forever, waiting for each other",
                    "option3": "When a thread runs indefinitely",
                    "option4": "When all threads are running simultaneously",
                    "solution": "2"
                },
                {
                    "text": "Which class is used to create a thread pool in Java?",
                    "hint": "This class is part of the executor framework.",
                    "option1": "ThreadPool",
                    "option2": "Executors",
                    "option3": "ThreadGroup",
                    "option4": "ThreadFactory",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of the volatile keyword?",
                    "hint": "It's related to variable visibility across threads.",
                    "option1": "To make variables unchangeable",
                    "option2": "To ensure a variable is read from main memory",
                    "option3": "To improve performance",
                    "option4": "To declare constants",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "Java Stream API and Functional Programming",
            "description": "Test your knowledge of Java's Stream API and functional programming features. This quiz covers lambda expressions, method references, and stream operations for processing collections of data.",
            "questions": [
                {
                    "text": "Which interface is primarily used for lambda expressions with a single parameter?",
                    "hint": "This functional interface is commonly used for operations that take one input.",
                    "option1": "BiFunction",
                    "option2": "Function",
                    "option3": "Consumer",
                    "option4": "Supplier",
                    "solution": "2"
                },
                {
                    "text": "What is the difference between map and flatMap in Stream API?",
                    "hint": "One transforms elements, the other transforms and flattens.",
                    "option1": "map is faster than flatMap",
                    "option2": "map transforms elements, flatMap transforms and flattens streams",
                    "option3": "flatMap is for primitive types only",
                    "option4": "They are identical in functionality",
                    "solution": "2"
                },
                {
                    "text": "Which stream operation is used to reduce a stream to a single value?",
                    "hint": "This terminal operation combines stream elements.",
                    "option1": "collect",
                    "option2": "reduce",
                    "option3": "combine",
                    "option4": "fold",
                    "solution": "2"
                },
                {
                    "text": "What does a method reference operator (::) do?",
                    "hint": "It provides a shorthand notation for lambda expressions.",
                    "option1": "Creates a new instance",
                    "option2": "References a method without invoking it",
                    "option3": "Calls a static method",
                    "option4": "Compares two methods",
                    "solution": "2"
                },
                {
                    "text": "Which stream operation is used to filter elements based on a predicate?",
                    "hint": "This intermediate operation selects elements that match a condition.",
                    "option1": "map",
                    "option2": "filter",
                    "option3": "reduce",
                    "option4": "collect",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "Java Exception Handling and Debug",
            "description": "Master Java's exception handling mechanisms and debugging techniques. This quiz covers try-catch blocks, custom exceptions, assertions, and best practices for handling errors in Java applications.",
            "questions": [
                {
                    "text": "Which keyword is used to handle exceptions in Java?",
                    "hint": "This starts the block for handling potential errors.",
                    "option1": "catch",
                    "option2": "try",
                    "option3": "throw",
                    "option4": "throws",
                    "solution": "2"
                },
                {
                    "text": "What is the difference between throw and throws?",
                    "hint": "One is used in method signatures, the other for throwing exceptions.",
                    "option1": "They are identical",
                    "option2": "throw is used to throw an exception, throws declares exceptions",
                    "option3": "throws is used for checked exceptions only",
                    "option4": "throw is used for runtime exceptions only",
                    "solution": "2"
                },
                {
                    "text": "Which block is always executed, regardless of exception?",
                    "hint": "This block is used for cleanup operations.",
                    "option1": "catch",
                    "option2": "finally",
                    "option3": "end",
                    "option4": "after",
                    "solution": "2"
                },
                {
                    "text": "What is the superclass of all exception classes in Java?",
                    "hint": "All exceptions inherit from this class.",
                    "option1": "Exception",
                    "option2": "Throwable",
                    "option3": "Error",
                    "option4": "RuntimeException",
                    "solution": "2"
                },
                {
                    "text": "Which statement about assertions is true?",
                    "hint": "Assertions are used for testing and debugging.",
                    "option1": "They are always enabled",
                    "option2": "They must be enabled explicitly",
                    "option3": "They replace exception handling",
                    "option4": "They are checked at compile time",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "Java Design Patterns and Best Practices",
            "description": "Explore common design patterns and best practices in Java development. This quiz tests your knowledge of software design principles, pattern implementation, and architectural concepts in Java.",
            "questions": [
                {
                    "text": "Which pattern ensures a class has only one instance?",
                    "hint": "This pattern controls object creation and access.",
                    "option1": "Factory",
                    "option2": "Singleton",
                    "option3": "Builder",
                    "option4": "Prototype",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of the Factory pattern?",
                    "hint": "It's about object creation without specifying exact class.",
                    "option1": "To create multiple instances of the same class",
                    "option2": "To delegate object creation to subclasses",
                    "option3": "To prevent object creation",
                    "option4": "To clone existing objects",
                    "solution": "2"
                },
                {
                    "text": "Which pattern is used to add functionality to an object dynamically?",
                    "hint": "This pattern wraps objects to add behavior.",
                    "option1": "Adapter",
                    "option2": "Decorator",
                    "option3": "Proxy",
                    "option4": "Bridge",
                    "solution": "2"
                },
                {
                    "text": "What is the main principle of the Strategy pattern?",
                    "hint": "It's about making algorithms interchangeable.",
                    "option1": "Inheritance over composition",
                    "option2": "Encapsulating algorithms and making them interchangeable",
                    "option3": "Creating object hierarchies",
                    "option4": "Managing object lifecycle",
                    "solution": "2"
                },
                {
                    "text": "Which pattern defines one-to-many dependencies between objects?",
                    "hint": "When one object changes state, its dependents are notified.",
                    "option1": "Mediator",
                    "option2": "Observer",
                    "option3": "Command",
                    "option4": "Chain of Responsibility",
                    "solution": "2"
                }
            ]
        }
    ],
    "C": [
        {
            "name": "C Language Programming Foundations",
            "description": "Test your knowledge of C language fundamentals including memory management, pointers, and syntax. This quiz covers core concepts essential for system programming and understanding the foundation of many modern languages.",
            "questions": [
                {
                    "text": "Which operator is used to access the value stored at an address in C?",
                    "hint": "This operator is known as the dereference operator.",
                    "option1": "&",
                    "option2": "*",
                    "option3": "->",
                    "option4": "#",
                    "solution": "2"
                },
                {
                    "text": "Which function is used to dynamically allocate memory in C?",
                    "hint": "This function allocates a specified number of bytes from the heap.",
                    "option1": "malloc()",
                    "option2": "alloc()",
                    "option3": "memalloc()",
                    "option4": "new()",
                    "solution": "1"
                },
                {
                    "text": "Which of the following correctly declares a pointer to an integer?",
                    "hint": "A pointer declaration requires a specific character and a type.",
                    "option1": "int ptr;",
                    "option2": "pointer int ptr;",
                    "option3": "int *ptr;",
                    "option4": "int &ptr;",
                    "solution": "3"
                },
                {
                    "text": "What does the 'sizeof' operator return?",
                    "hint": "This operator helps determine memory requirements.",
                    "option1": "The memory address of a variable",
                    "option2": "The size in bytes of a variable or data type",
                    "option3": "The length of an array",
                    "option4": "The number of elements in a structure",
                    "solution": "2"
                },
                {
                    "text": "What is the correct way to free memory allocated with malloc()?",
                    "hint": "Memory allocated dynamically must be explicitly released.",
                    "option1": "delete ptr;",
                    "option2": "release(ptr);",
                    "option3": "free(ptr);",
                    "option4": "dealloc(ptr);",
                    "solution": "3"
                },
                {
                    "text": "Which C data structure is defined using the keyword 'struct'?",
                    "hint": "This allows grouping of variables of different types under a single name.",
                    "option1": "Array",
                    "option2": "Structure",
                    "option3": "Union",
                    "option4": "Enumeration",
                    "solution": "2"
                },
                {
                    "text": "In C, what is the default return type of a function if not specified?",
                    "hint": "C has a default assumption for functions without explicit return types.",
                    "option1": "void",
                    "option2": "int",
                    "option3": "char",
                    "option4": "float",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of the 'static' keyword for a local variable in C?",
                    "hint": "It affects the variable's lifetime and initialization behavior.",
                    "option1": "Makes the variable accessible across multiple files",
                    "option2": "Preserves the variable's value between function calls",
                    "option3": "Allocates memory on the stack instead of the heap",
                    "option4": "Makes the variable constant and unchangeable",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "C Memory Management and Pointers",
            "description": "Master C's memory management concepts including pointers, memory allocation, and array manipulation. This quiz tests your understanding of low-level memory operations essential for C programming.",
            "questions": [
                {
                    "text": "What does malloc() return on failure?",
                    "hint": "This indicates memory allocation was unsuccessful.",
                    "option1": "0",
                    "option2": "NULL",
                    "option3": "-1",
                    "option4": "void",
                    "solution": "2"
                },
                {
                    "text": "Which operator is used to get the address of a variable?",
                    "hint": "This unary operator returns the memory location.",
                    "option1": "*",
                    "option2": "&",
                    "option3": "#",
                    "option4": "@",
                    "solution": "2"
                },
                {
                    "text": "What happens if you free() the same pointer twice?",
                    "hint": "This is a common memory-related bug.",
                    "option1": "Nothing",
                    "option2": "Undefined behavior",
                    "option3": "Memory leak",
                    "option4": "Compilation error",
                    "solution": "2"
                },
                {
                    "text": "What is the sizeof(char) in C?",
                    "hint": "This is standardized across all platforms.",
                    "option1": "1 byte",
                    "option2": "2 bytes",
                    "option3": "4 bytes",
                    "option4": "8 bytes",
                    "solution": "1"
                },
                {
                    "text": "Which function is used to reallocate memory?",
                    "hint": "This function can change the size of allocated memory.",
                    "option1": "malloc()",
                    "option2": "realloc()",
                    "option3": "calloc()",
                    "option4": "alloc()",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "C Standard Library Functions",
            "description": "Test your knowledge of C's standard library functions for string manipulation, I/O operations, and general utilities. This quiz covers commonly used functions from various standard library headers.",
            "questions": [
                {
                    "text": "Which header file contains printf() function?",
                    "hint": "This is one of the most commonly included headers.",
                    "option1": "<stdlib.h>",
                    "option2": "<stdio.h>",
                    "option3": "<string.h>",
                    "option4": "<io.h>",
                    "solution": "2"
                },
                {
                    "text": "What does the strlen() function return?",
                    "hint": "This function operates on strings.",
                    "option1": "String capacity",
                    "option2": "Length of string excluding null terminator",
                    "option3": "Memory size of string",
                    "option4": "Length including null terminator",
                    "solution": "2"
                },
                {
                    "text": "Which function converts a string to an integer?",
                    "hint": "This function is declared in stdlib.h.",
                    "option1": "itoa()",
                    "option2": "atoi()",
                    "option3": "strtoint()",
                    "option4": "parseInt()",
                    "solution": "2"
                },
                {
                    "text": "What does fgets() do?",
                    "hint": "This function is used for input operations.",
                    "option1": "Writes to file",
                    "option2": "Reads a line from stream",
                    "option3": "Gets file status",
                    "option4": "Sets file position",
                    "solution": "2"
                },
                {
                    "text": "Which function copies memory between buffers?",
                    "hint": "This function copies a specified number of bytes.",
                    "option1": "strcpy()",
                    "option2": "memcpy()",
                    "option3": "copy()",
                    "option4": "memmove()",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "C Preprocessor and Macros",
            "description": "Explore C's preprocessor directives and macro system. This quiz covers macro definition, conditional compilation, and preprocessor commands essential for C programming.",
            "questions": [
                {
                    "text": "What does #define do?",
                    "hint": "This preprocessor directive is used for constants and macros.",
                    "option1": "Creates a variable",
                    "option2": "Creates a macro or constant",
                    "option3": "Imports a header",
                    "option4": "Defines a function",
                    "solution": "2"
                },
                {
                    "text": "Which symbol is used to stringify a macro parameter?",
                    "hint": "This operator converts a macro parameter to a string literal.",
                    "option1": "@",
                    "option2": "#",
                    "option3": "$",
                    "option4": "&",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of #ifdef?",
                    "hint": "This is used for conditional compilation.",
                    "option1": "Loop control",
                    "option2": "Conditional compilation",
                    "option3": "Error handling",
                    "option4": "Function definition",
                    "solution": "2"
                },
                {
                    "text": "Which directive prevents multiple inclusion of headers?",
                    "hint": "This is commonly used in header files.",
                    "option1": "#norepeat",
                    "option2": "#pragma once",
                    "option3": "#unique",
                    "option4": "#single",
                    "solution": "2"
                },
                {
                    "text": "What does ## do in a macro?",
                    "hint": "This operator combines tokens in macro definitions.",
                    "option1": "Mathematical multiplication",
                    "option2": "Token concatenation",
                    "option3": "Logical AND",
                    "option4": "String concatenation",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "C Bit Manipulation",
            "description": "Test your knowledge of bit manipulation operations in C. This quiz covers bitwise operators, bit fields, and common bit manipulation techniques used in systems programming.",
            "questions": [
                {
                    "text": "Which operator performs a bitwise AND?",
                    "hint": "This operator compares corresponding bits.",
                    "option1": "&&",
                    "option2": "&",
                    "option3": "AND",
                    "option4": "|",
                    "solution": "2"
                },
                {
                    "text": "What does the << operator do?",
                    "hint": "This operator moves bits in one direction.",
                    "option1": "Comparison",
                    "option2": "Left shift",
                    "option3": "Right shift",
                    "option4": "Rotation",
                    "solution": "2"
                },
                {
                    "text": "How do you set a specific bit to 1?",
                    "hint": "This involves using OR with a shifted bit.",
                    "option1": "num + (1 << pos)",
                    "option2": "num | (1 << pos)",
                    "option3": "num && (1 << pos)",
                    "option4": "num || (1 << pos)",
                    "solution": "2"
                },
                {
                    "text": "Which operator inverts all bits?",
                    "hint": "This unary operator flips each bit.",
                    "option1": "!",
                    "option2": "~",
                    "option3": "^",
                    "option4": "-",
                    "solution": "2"
                },
                {
                    "text": "How many bits are in a byte in C?",
                    "hint": "This is standardized in C.",
                    "option1": "4",
                    "option2": "8",
                    "option3": "16",
                    "option4": "32",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "C File Operations",
            "description": "Master file handling in C including file I/O operations, error handling, and stream manipulation. This quiz covers essential concepts for working with files in C programs.",
            "questions": [
                {
                    "text": "Which mode opens a file for appending?",
                    "hint": "This mode adds data to the end of the file.",
                    "option1": "r",
                    "option2": "a",
                    "option3": "w",
                    "option4": "rb",
                    "solution": "2"
                },
                {
                    "text": "What type represents a file pointer in C?",
                    "hint": "This type is defined in stdio.h.",
                    "option1": "fileptr",
                    "option2": "FILE*",
                    "option3": "fptr",
                    "option4": "HANDLE",
                    "solution": "2"
                },
                {
                    "text": "Which function closes a file stream?",
                    "hint": "This function should be called when file operations are complete.",
                    "option1": "close()",
                    "option2": "fclose()",
                    "option3": "closeFile()",
                    "option4": "endFile()",
                    "solution": "2"
                },
                {
                    "text": "What does fseek() do?",
                    "hint": "This function changes the file position indicator.",
                    "option1": "Searches for text",
                    "option2": "Sets file position",
                    "option3": "Finds file size",
                    "option4": "Seeks next line",
                    "solution": "2"
                },
                {
                    "text": "Which function reads formatted input from a file?",
                    "hint": "This is similar to scanf but for files.",
                    "option1": "scanf()",
                    "option2": "fscanf()",
                    "option3": "fgets()",
                    "option4": "fread()",
                    "solution": "2"
                }
            ]
        }
    ],
    "C++": [
        {
            "name": "C++ Modern Features and STL",
            "description": "Master modern C++ features including templates, STL containers, and algorithms. This quiz covers essential concepts for writing efficient and maintainable C++ code using modern language features.",
            "questions": [
                {
                    "text": "What is auto type deduction in C++?",
                    "hint": "This feature allows the compiler to determine types automatically.",
                    "option1": "Manual type casting",
                    "option2": "Automatic type inference",
                    "option3": "Dynamic typing",
                    "option4": "Type conversion",
                    "solution": "2"
                },
                {
                    "text": "Which C++ container provides constant time access to elements?",
                    "hint": "Think about associative containers in the STL.",
                    "option1": "std::list",
                    "option2": "std::unordered_map",
                    "option3": "std::set",
                    "option4": "std::deque",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of std::move in C++?",
                    "hint": "It's related to transferring resources between objects.",
                    "option1": "To copy objects",
                    "option2": "To enable move semantics",
                    "option3": "To relocate memory",
                    "option4": "To swap objects",
                    "solution": "2"
                },
                {
                    "text": "Which smart pointer represents shared ownership?",
                    "hint": "Multiple pointers can own the same resource.",
                    "option1": "unique_ptr",
                    "option2": "shared_ptr",
                    "option3": "weak_ptr",
                    "option4": "auto_ptr",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of std::function?",
                    "hint": "It provides a general-purpose function wrapper.",
                    "option1": "To declare functions",
                    "option2": "To store callable objects",
                    "option3": "To define member functions",
                    "option4": "To create function templates",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "C++ Object-Oriented Programming",
            "description": "Test your understanding of C++ object-oriented programming concepts including inheritance, polymorphism, and encapsulation. This quiz covers fundamental OOP principles and their implementation in C++.",
            "questions": [
                {
                    "text": "What is virtual inheritance used for?",
                    "hint": "It solves a specific problem with multiple inheritance.",
                    "option1": "To create abstract classes",
                    "option2": "To avoid the diamond problem",
                    "option3": "To implement interfaces",
                    "option4": "To enable polymorphism",
                    "solution": "2"
                },
                {
                    "text": "Which keyword prevents further inheritance?",
                    "hint": "This specifier stops a class from being used as a base class.",
                    "option1": "stop",
                    "option2": "final",
                    "option3": "sealed",
                    "option4": "end",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of the override keyword?",
                    "hint": "It helps catch errors in inheritance hierarchies.",
                    "option1": "To create virtual functions",
                    "option2": "To indicate function overriding",
                    "option3": "To prevent inheritance",
                    "option4": "To force implementation",
                    "solution": "2"
                },
                {
                    "text": "Which access specifier makes members public to derived classes but private to others?",
                    "hint": "This provides intermediate access control.",
                    "option1": "private",
                    "option2": "protected",
                    "option3": "public",
                    "option4": "internal",
                    "solution": "2"
                },
                {
                    "text": "What is a pure virtual function?",
                    "hint": "It's used to create abstract classes.",
                    "option1": "A virtual function with implementation",
                    "option2": "A function that must be implemented by derived classes",
                    "option3": "A static member function",
                    "option4": "A const member function",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "C++ Memory Management",
            "description": "Explore C++ memory management concepts including RAII, smart pointers, and resource handling. This quiz tests your understanding of modern C++ memory management techniques and best practices.",
            "questions": [
                {
                    "text": "What does RAII stand for in C++?",
                    "hint": "It's a fundamental C++ resource management idiom.",
                    "option1": "Random Access Iterator Implementation",
                    "option2": "Resource Acquisition Is Initialization",
                    "option3": "Runtime Array Index Initialization",
                    "option4": "Resource Allocation In Implementation",
                    "solution": "2"
                },
                {
                    "text": "Which operator is used for dynamic memory allocation in C++?",
                    "hint": "This operator allocates memory from the free store.",
                    "option1": "malloc",
                    "option2": "new",
                    "option3": "alloc",
                    "option4": "create",
                    "solution": "2"
                },
                {
                    "text": "What is a memory leak in C++?",
                    "hint": "It's related to improper resource management.",
                    "option1": "Using uninitialized memory",
                    "option2": "Not freeing allocated memory",
                    "option3": "Stack overflow",
                    "option4": "Buffer overflow",
                    "solution": "2"
                },
                {
                    "text": "What is placement new in C++?",
                    "hint": "It's used for constructing objects at specific memory locations.",
                    "option1": "Regular memory allocation",
                    "option2": "Constructing an object at a specific address",
                    "option3": "Array allocation",
                    "option4": "Stack allocation",
                    "solution": "2"
                },
                {
                    "text": "Which smart pointer allows temporary ownership?",
                    "hint": "It helps prevent circular references with shared_ptr.",
                    "option1": "unique_ptr",
                    "option2": "weak_ptr",
                    "option3": "shared_ptr",
                    "option4": "auto_ptr",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "C++ Template Programming",
            "description": "Master C++ template programming including template metaprogramming, SFINAE, and generic programming techniques. This quiz covers advanced template concepts used in modern C++ development.",
            "questions": [
                {
                    "text": "What is SFINAE in C++?",
                    "hint": "It's a template metaprogramming technique.",
                    "option1": "A compilation error",
                    "option2": "Substitution Failure Is Not An Error",
                    "option3": "A runtime error",
                    "option4": "A linking error",
                    "solution": "2"
                },
                {
                    "text": "What is a variadic template?",
                    "hint": "It allows a varying number of template parameters.",
                    "option1": "A template with fixed parameters",
                    "option2": "A template with variable number of parameters",
                    "option3": "A template with no parameters",
                    "option4": "A template with one parameter",
                    "solution": "2"
                },
                {
                    "text": "What is template specialization used for?",
                    "hint": "It provides different implementations for specific types.",
                    "option1": "To make templates faster",
                    "option2": "To provide custom implementations for specific types",
                    "option3": "To reduce compile time",
                    "option4": "To increase type safety",
                    "solution": "2"
                },
                {
                    "text": "What is std::enable_if used for?",
                    "hint": "It's related to conditional template instantiation.",
                    "option1": "To enable features at runtime",
                    "option2": "To enable/disable template instantiation based on conditions",
                    "option3": "To enable multiple inheritance",
                    "option4": "To enable type conversion",
                    "solution": "2"
                },
                {
                    "text": "What is a type trait in C++?",
                    "hint": "It provides information about types at compile time.",
                    "option1": "A runtime type check",
                    "option2": "A template that provides type information",
                    "option3": "A type conversion utility",
                    "option4": "A type safety feature",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "C++ Concurrency and Multithreading",
            "description": "Learn C++ concurrency features including threads, mutexes, and async programming. This quiz covers modern C++ threading concepts and synchronization mechanisms.",
            "questions": [
                {
                    "text": "What is std::async used for?",
                    "hint": "It's related to asynchronous task execution.",
                    "option1": "Synchronous execution",
                    "option2": "Asynchronous function execution",
                    "option3": "Thread creation",
                    "option4": "Process creation",
                    "solution": "2"
                },
                {
                    "text": "Which class is used for mutual exclusion in C++?",
                    "hint": "It prevents multiple threads from accessing shared resources simultaneously.",
                    "option1": "lock",
                    "option2": "mutex",
                    "option3": "critical",
                    "option4": "sync",
                    "solution": "2"
                },
                {
                    "text": "What is a data race in C++?",
                    "hint": "It's a common concurrency problem.",
                    "option1": "A race to allocate memory",
                    "option2": "Simultaneous access to shared data without synchronization",
                    "option3": "A competition for CPU time",
                    "option4": "A race to complete tasks",
                    "solution": "2"
                },
                {
                    "text": "What is std::condition_variable used for?",
                    "hint": "It enables threads to wait for specific conditions.",
                    "option1": "Variable type checking",
                    "option2": "Thread synchronization and communication",
                    "option3": "Exception handling",
                    "option4": "Memory management",
                    "solution": "2"
                },
                {
                    "text": "What is a promise in C++ threading?",
                    "hint": "It's part of the mechanism for passing values between threads.",
                    "option1": "A guarantee of execution",
                    "option2": "A way to set values in asynchronous operations",
                    "option3": "A thread safety mechanism",
                    "option4": "A performance optimization",
                    "solution": "2"
                }
            ]
        },
        {
            "name": "C++ Object Oriented Programming",
            "description": "Test your understanding of C++ programming with focus on object-oriented features and modern C++ practices. This quiz covers classes, inheritance, templates, and standard library components essential for effective C++ development.",
            "questions": [
                {
                    "text": "Which feature of C++ allows treating a derived class reference as a base class reference?",
                    "hint": "This is a fundamental concept in object-oriented programming.",
                    "option1": "Encapsulation",
                    "option2": "Inheritance",
                    "option3": "Polymorphism",
                    "option4": "Abstraction",
                    "solution": "3"
                },
                {
                    "text": "What is the correct way to define a pure virtual function in C++?",
                    "hint": "Pure virtual functions must be implemented by derived classes.",
                    "option1": "virtual void func() const;",
                    "option2": "abstract void func();",
                    "option3": "void func() = virtual;",
                    "option4": "virtual void func() = 0;",
                    "solution": "4"
                },
                {
                    "text": "Which smart pointer in C++11 represents exclusive ownership?",
                    "hint": "This pointer automatically deletes the managed object when the pointer goes out of scope.",
                    "option1": "std::shared_ptr",
                    "option2": "std::unique_ptr",
                    "option3": "std::auto_ptr",
                    "option4": "std::weak_ptr",
                    "solution": "2"
                },
                {
                    "text": "What does the 'explicit' keyword do when used with a constructor?",
                    "hint": "It affects how the constructor can be used for conversions.",
                    "option1": "Makes the constructor private",
                    "option2": "Prevents implicit type conversions",
                    "option3": "Makes the constructor inline",
                    "option4": "Requires all parameters to have default values",
                    "solution": "2"
                },
                {
                    "text": "Which C++ container provides direct access to elements using an index?",
                    "hint": "This container stores elements in a contiguous memory location.",
                    "option1": "std::list",
                    "option2": "std::map",
                    "option3": "std::vector",
                    "option4": "std::set",
                    "solution": "3"
                },
                {
                    "text": "What is the correct way to initialize a member variable in a constructor's initialization list?",
                    "hint": "This approach is more efficient than assigning values in the constructor body.",
                    "option1": "Constructor() { member = value; }",
                    "option2": "Constructor() : member(value) {}",
                    "option3": "Constructor() : member = value {}",
                    "option4": "Constructor() -> member(value) {}",
                    "solution": "2"
                },
                {
                    "text": "What does the 'const' keyword mean when applied to a member function?",
                    "hint": "It affects what the function can modify.",
                    "option1": "The function cannot be overridden",
                    "option2": "The function cannot modify member variables",
                    "option3": "The function can only be called once",
                    "option4": "The function must be implemented inline",
                    "solution": "2"
                },
                {
                    "text": "Which C++ feature allows creating functions that work with different types?",
                    "hint": "This feature provides compile-time polymorphism.",
                    "option1": "Inheritance",
                    "option2": "Virtual functions",
                    "option3": "Templates",
                    "option4": "Operator overloading",
                    "solution": "3"
                }
            ]
        }
    ],
    "C#": [
        {
            "name": "C# and .NET Framework Essentials",
            "description": "Test your knowledge of C# programming language and .NET framework concepts. This quiz covers language syntax, object-oriented features, and common patterns used in C# development.",
            "questions": [
                {
                    "text": "Which keyword is used to define a property with only a getter in C#?",
                    "hint": "This creates a read-only property in the latest versions of C#.",
                    "option1": "readonly",
                    "option2": "get",
                    "option3": "readonly get",
                    "option4": "get only",
                    "solution": "1"
                },
                {
                    "text": "What is the purpose of the 'using' statement in C#?",
                    "hint": "It helps manage resources that require disposal.",
                    "option1": "To import namespaces",
                    "option2": "To ensure objects are properly disposed",
                    "option3": "To include external libraries",
                    "option4": "To create a new scope",
                    "solution": "2"
                },
                {
                    "text": "Which collection type in C# implements both IList and IDictionary interfaces?",
                    "hint": "This allows accessing elements by both index and key.",
                    "option1": "List<T>",
                    "option2": "Dictionary<TKey, TValue>",
                    "option3": "HashSet<T>",
                    "option4": "Hashtable",
                    "solution": "4"
                },
                {
                    "text": "What keyword is used to define a method that doesn't return a value in C#?",
                    "hint": "This indicates a procedure rather than a function.",
                    "option1": "void",
                    "option2": "null",
                    "option3": "empty",
                    "option4": "procedure",
                    "solution": "1"
                },
                {
                    "text": "What is the correct way to implement an interface method in C#?",
                    "hint": "Consider visibility modifiers and method signatures.",
                    "option1": "private void Method() {}",
                    "option2": "public virtual void Method() {}",
                    "option3": "public void Method() {}",
                    "option4": "void IInterface.Method() {}",
                    "solution": "3"
                },
                {
                    "text": "What does the 'async' keyword do in C#?",
                    "hint": "This relates to handling operations that may take time to complete.",
                    "option1": "Makes a method run on a separate thread automatically",
                    "option2": "Makes a method return immediately",
                    "option3": "Marks a method that can use the 'await' keyword",
                    "option4": "Ensures a method executes synchronously",
                    "solution": "3"
                },
                {
                    "text": "Which collection should you use when you need to maintain insertion order in C#?",
                    "hint": "Some collections maintain the order elements were added, others don't.",
                    "option1": "Dictionary<TKey, TValue>",
                    "option2": "HashSet<T>",
                    "option3": "List<T>",
                    "option4": "SortedSet<T>",
                    "solution": "3"
                },
                {
                    "text": "What is the purpose of the 'sealed' keyword in C#?",
                    "hint": "It affects inheritance capabilities.",
                    "option1": "Prevents a class from being instantiated",
                    "option2": "Makes a class thread-safe",
                    "option3": "Prevents a class from being inherited",
                    "option4": "Makes class members immutable",
                    "solution": "3"
                }
            ]
        }
    ],
    "TypeScript": [
        {
            "name": "TypeScript Type System and Features",
            "description": "Explore TypeScript's powerful type system and unique features that extend JavaScript. This quiz tests your knowledge of TypeScript's static typing, interfaces, generics, and other tools for building robust applications.",
            "questions": [
                {
                    "text": "What is the main purpose of TypeScript?",
                    "hint": "TypeScript was developed to address certain limitations in JavaScript.",
                    "option1": "To replace JavaScript entirely",
                    "option2": "To add static typing to JavaScript",
                    "option3": "To increase JavaScript runtime performance",
                    "option4": "To add new runtime features to JavaScript",
                    "solution": "2"
                },
                {
                    "text": "Which TypeScript feature allows you to create a type that can represent one of several types?",
                    "hint": "This lets you define that a value could be one of a specific set of types.",
                    "option1": "Interfaces",
                    "option2": "Type Guards",
                    "option3": "Union Types",
                    "option4": "Generics",
                    "solution": "3"
                },
                {
                    "text": "What is the correct way to define a function type in TypeScript?",
                    "hint": "Function types define the signature of functions.",
                    "option1": "function(x: number): string",
                    "option2": "(x: number) => string",
                    "option3": "Function<number, string>",
                    "option4": "{param: number, return: string}",
                    "solution": "2"
                },
                {
                    "text": "Which TypeScript feature allows you to extract a type from another type?",
                    "hint": "This helps create derived types without duplicating definitions.",
                    "option1": "Type Assertions",
                    "option2": "Type Guards",
                    "option3": "Type Inference",
                    "option4": "Type Operators",
                    "solution": "4"
                },
                {
                    "text": "What does the 'readonly' modifier do in TypeScript?",
                    "hint": "It affects how properties can be modified after initialization.",
                    "option1": "Makes a property hidden from JavaScript output",
                    "option2": "Prevents a property from being modified after initialization",
                    "option3": "Makes a property optional",
                    "option4": "Specifies that a property must be initialized at declaration",
                    "solution": "2"
                },
                {
                    "text": "Which is the correct way to define a generic function in TypeScript?",
                    "hint": "Generics allow you to create reusable components that work with any data type.",
                    "option1": "function example<T>(arg: T): T { return arg; }",
                    "option2": "function example(arg: generic): generic { return arg; }",
                    "option3": "function example[T](arg: T): T { return arg; }",
                    "option4": "function example(T)(arg: T): T { return arg; }",
                    "solution": "1"
                },
                {
                    "text": "What is the purpose of TypeScript's 'as' keyword?",
                    "hint": "It's related to telling the compiler about a type it can't infer.",
                    "option1": "To create type aliases",
                    "option2": "To perform type casting",
                    "option3": "To import types from modules",
                    "option4": "To implement interfaces",
                    "solution": "2"
                },
                {
                    "text": "Which TypeScript feature allows types to be automatically inferred?",
                    "hint": "This makes TypeScript determine types without explicit annotations.",
                    "option1": "Type Guards",
                    "option2": "Type Assertions",
                    "option3": "Type Inference",
                    "option4": "Type Casting",
                    "solution": "3"
                },
                {
                    "text": "What is the main purpose of TypeScript?",
                    "hint": "Think about what TypeScript adds to JavaScript.",
                    "option1": "To replace JavaScript entirely",
                    "option2": "To add static typing to JavaScript",
                    "option3": "To increase JavaScript performance",
                    "option4": "To add runtime features to JavaScript",
                    "solution": "2"
                },
                {
                    "text": "Which symbol is used to define an interface in TypeScript?",
                    "hint": "This keyword defines a contract for object structure.",
                    "option1": "class",
                    "option2": "type",
                    "option3": "interface",
                    "option4": "struct",
                    "solution": "3"
                },
                {
                    "text": "How do you specify that a parameter is optional in TypeScript?",
                    "hint": "A special character is added after the parameter name.",
                    "option1": "param?:type",
                    "option2": "param!:type",
                    "option3": "param*:type",
                    "option4": "param|:type",
                    "solution": "1"
                }
            ]
        }
    ],
    "Go": [
        {
            "name": "Go Language Fundamentals and Concurrency",
            "description": "Test your knowledge of Go programming language basics including its syntax, types, and concurrency model. This quiz focuses on Go's unique features for building efficient and concurrent applications.",
            "questions": [
                {
                    "text": "Which keyword is used to declare variables in Go?",
                    "hint": "Go provides a shorthand for declaring and initializing variables.",
                    "option1": "var",
                    "option2": "let",
                    "option3": "const",
                    "option4": "dim",
                    "solution": "1"
                },
                {
                    "text": "What is a goroutine in Go?",
                    "hint": "It's related to Go's approach to concurrent execution.",
                    "option1": "A type of variable",
                    "option2": "A lightweight thread managed by the Go runtime",
                    "option3": "A network connection handler",
                    "option4": "A database connection pool",
                    "solution": "2"
                },
                {
                    "text": "How do you create a slice in Go?",
                    "hint": "Slices are flexible views into arrays.",
                    "option1": "slice := make([]int, 5)",
                    "option2": "slice := new([]int, 5)",
                    "option3": "slice := slice(int, 5)",
                    "option4": "slice := []int{5}",
                    "solution": "1"
                },
                {
                    "text": "What is the purpose of channels in Go?",
                    "hint": "They're related to Go's communication model between concurrent processes.",
                    "option1": "To organize code into packages",
                    "option2": "To provide communication and synchronization between goroutines",
                    "option3": "To handle network connections",
                    "option4": "To create object-oriented hierarchies",
                    "solution": "2"
                },
                {
                    "text": "Which statement is used to create a new instance of a struct in Go?",
                    "hint": "There are multiple ways to initialize structs in Go.",
                    "option1": "new MyStruct()",
                    "option2": "MyStruct{}",
                    "option3": "create(MyStruct)",
                    "option4": "instance := MyStruct.new()",
                    "solution": "2"
                },
                {
                    "text": "What does the underscore (_) identifier represent in Go?",
                    "hint": "It has a special meaning when used as a variable name.",
                    "option1": "A private variable",
                    "option2": "A blank identifier for unused values",
                    "option3": "A global variable",
                    "option4": "The last computed value",
                    "solution": "2"
                },
                {
                    "text": "How do you handle errors in Go?",
                    "hint": "Go has a specific pattern for error handling that differs from exceptions.",
                    "option1": "Using try/catch blocks",
                    "option2": "Using throw/catch statements",
                    "option3": "By returning error values that are checked with if statements",
                    "option4": "Using the exception keyword",
                    "solution": "3"
                },
                {
                    "text": "What is the zero value of a string in Go?",
                    "hint": "Every type in Go has a default zero value when not explicitly initialized.",
                    "option1": "nil",
                    "option2": "\"\"",
                    "option3": "null",
                    "option4": "0",
                    "solution": "2"
                }
            ]
        }
    ],
    "Rust": [
        {
            "name": "Rust Memory Safety and Systems Programming",
            "description": "Test your knowledge of Rust programming language fundamentals with focus on its memory safety features and systems programming capabilities. This quiz covers ownership, borrowing, lifetimes, and other core concepts that make Rust unique.",
            "questions": [
                {
                    "text": "What is the main feature that distinguishes Rust from other languages?",
                    "hint": "Rust provides safety guarantees without a garbage collector.",
                    "option1": "Runtime performance",
                    "option2": "Memory safety without garbage collection",
                    "option3": "Cross-platform compatibility",
                    "option4": "Functional programming paradigm",
                    "solution": "2"
                },
                {
                    "text": "Which concept in Rust ensures that there is exactly one binding to any given resource?",
                    "hint": "This concept is fundamental to Rust's memory safety model.",
                    "option1": "Borrowing",
                    "option2": "Ownership",
                    "option3": "Lifetimes",
                    "option4": "Traits",
                    "solution": "2"
                },
                {
                    "text": "What is a mutable reference in Rust?",
                    "hint": "References have different capabilities regarding mutation.",
                    "option1": "A reference that allows changing the value it points to",
                    "option2": "A variable that can be reassigned",
                    "option3": "A constant pointer",
                    "option4": "A global variable",
                    "solution": "1"
                },
                {
                    "text": "Which keyword is used to define a function in Rust?",
                    "hint": "This is the standard way to declare functions in Rust.",
                    "option1": "function",
                    "option2": "def",
                    "option3": "fn",
                    "option4": "func",
                    "solution": "3"
                },
                {
                    "text": "What does the '&' operator signify in Rust?",
                    "hint": "This is related to how Rust handles memory references.",
                    "option1": "Bitwise AND operation",
                    "option2": "Reference to a value",
                    "option3": "Pointer arithmetic",
                    "option4": "Boolean AND operation",
                    "solution": "2"
                },
                {
                    "text": "What is the purpose of the 'match' keyword in Rust?",
                    "hint": "It's a powerful control flow operator.",
                    "option1": "To match regular expressions",
                    "option2": "To compare two values for equality",
                    "option3": "Pattern matching against the structure of a value",
                    "option4": "To link functions with variable names",
                    "solution": "3"
                },
                {
                    "text": "Which collection type in Rust stores elements in contiguous memory?",
                    "hint": "This is similar to arrays but can grow or shrink in size.",
                    "option1": "HashMap",
                    "option2": "LinkedList",
                    "option3": "Vec",
                    "option4": "BTreeMap",
                    "solution": "3"
                },
                {
                    "text": "What does the '#[derive(Debug)]' attribute do in Rust?",
                    "hint": "It's related to how values can be printed during development.",
                    "option1": "Adds debugging information to the compiled binary",
                    "option2": "Automatically implements the Debug trait for a type",
                    "option3": "Enables the debugging mode for an application",
                    "option4": "Creates debug assertions for a function",
                    "solution": "2"
                }
            ]
        }
    ],
    "HTML": [
        {
            "name": "HTML5 Basics and Semantic Elements",
            "description": "Test your knowledge of HTML5 fundamentals including semantic markup, form elements, and document structure. This quiz covers essential concepts for building well-structured web pages with modern HTML.",
            "questions": [
                {
                    "text": "Which HTML5 element is used to define important content?",
                    "hint": "This semantic element indicates that its content is more significant than surrounding content.",
                    "option1": "<important>",
                    "option2": "<strong>",
                    "option3": "<em>",
                    "option4": "<main>",
                    "solution": "2"
                },
                {
                    "text": "Which attribute is required for all <input> elements?",
                    "hint": "This attribute helps identify the input field when processing form data.",
                    "option1": "type",
                    "option2": "name",
                    "option3": "value",
                    "option4": "id",
                    "solution": "1"
                },
                {
                    "text": "Which HTML5 element should contain the primary navigation links?",
                    "hint": "This semantic element is specifically designed for navigation sections.",
                    "option1": "<menu>",
                    "option2": "<links>",
                    "option3": "<nav>",
                    "option4": "<navigation>",
                    "solution": "3"
                },
                {
                    "text": "What is the correct HTML for creating a hyperlink?",
                    "hint": "Links require specific attributes to specify their destination.",
                    "option1": "<a url=\"http://example.com\">Example</a>",
                    "option2": "<a href=\"http://example.com\">Example</a>",
                    "option3": "<link href=\"http://example.com\">Example</link>",
                    "option4": "<hyperlink=http://example.com>Example</hyperlink>",
                    "solution": "2"
                },
                {
                    "text": "Which HTML5 element defines a section of a document that contains interactive controls for submitting information?",
                    "hint": "This element is used to collect user input.",
                    "option1": "<input>",
                    "option2": "<section>",
                    "option3": "<form>",
                    "option4": "<controls>",
                    "solution": "3"
                },
                {
                    "text": "Which HTML element is used to specify a header for a document or section?",
                    "hint": "This semantic element typically contains introductory content or navigation aids.",
                    "option1": "<head>",
                    "option2": "<header>",
                    "option3": "<top>",
                    "option4": "<heading>",
                    "solution": "2"
                },
                {
                    "text": "Which HTML5 input type should be used for email addresses?",
                    "hint": "HTML5 introduced specialized input types for common data formats.",
                    "option1": "<input type=\"email\">",
                    "option2": "<input type=\"mail\">",
                    "option3": "<input type=\"text\">",
                    "option4": "<input type=\"address\">",
                    "solution": "1"
                },
                {
                    "text": "What is the purpose of the HTML5 <canvas> element?",
                    "hint": "This element enables certain visual content to be created dynamically.",
                    "option1": "To display database data in tabular format",
                    "option2": "To create form controls",
                    "option3": "To draw graphics via scripting",
                    "option4": "To embed external applications",
                    "solution": "3"
                }
            ]
        }
    ],
    "CSS": [
        {
            "name": "CSS Styling and Layout Techniques",
            "description": "Test your knowledge of Cascading Style Sheets including selectors, layout models, and responsive design techniques. This quiz covers fundamental and advanced CSS concepts for creating visually appealing and responsive web interfaces.",
            "questions": [
                {
                    "text": "Which CSS property is used to control the space between elements?",
                    "hint": "This property affects the external spacing of an element.",
                    "option1": "padding",
                    "option2": "margin",
                    "option3": "spacing",
                    "option4": "border-spacing",
                    "solution": "2"
                },
                {
                    "text": "Which CSS selector has the highest specificity?",
                    "hint": "Specificity determines which style rules apply when there are conflicts.",
                    "option1": ".class-name",
                    "option2": "#id-name",
                    "option3": "element",
                    "option4": "[attribute=value]",
                    "solution": "2"
                },
                {
                    "text": "Which property is used to make text bold in CSS?",
                    "hint": "This property controls the thickness of characters.",
                    "option1": "text-weight",
                    "option2": "font-weight",
                    "option3": "bold",
                    "option4": "text-style",
                    "solution": "2"
                },
                {
                    "text": "What is the CSS box model?",
                    "hint": "It describes how elements are rendered on the page.",
                    "option1": "A framework for organizing CSS code",
                    "option2": "A design pattern for responsive layouts",
                    "option3": "The model that describes content, padding, border, and margin",
                    "option4": "A system for organizing elements in containers",
                    "solution": "3"
                },
                {
                    "text": "Which CSS property is used to create a flexible box layout?",
                    "hint": "This modern layout mode helps with responsive design.",
                    "option1": "flex",
                    "option2": "display: flexbox",
                    "option3": "display: flex",
                    "option4": "flexible-box",
                    "solution": "3"
                },
                {
                    "text": "What is the purpose of CSS media queries?",
                    "hint": "They are essential for responsive web design.",
                    "option1": "To load different CSS files based on browser type",
                    "option2": "To apply different styles based on device characteristics",
                    "option3": "To query a database for styling information",
                    "option4": "To animate elements based on user interactions",
                    "solution": "2"
                },
                {
                    "text": "Which unit is NOT relative to font size in CSS?",
                    "hint": "Some units scale with font size, others don't.",
                    "option1": "em",
                    "option2": "rem",
                    "option3": "ex",
                    "option4": "px",
                    "solution": "4"
                },
                {
                    "text": "What does the CSS property 'position: absolute' do?",
                    "hint": "It affects how an element is positioned in relation to other elements.",
                    "option1": "Positions the element relative to the viewport",
                    "option2": "Positions the element relative to its normal position",
                    "option3": "Positions the element relative to its nearest positioned ancestor",
                    "option4": "Removes the element from the document flow entirely",
                    "solution": "3"
                }
            ]
        }
    ],
    "Lua": [
        {
            "name": "Lua Programming Language Essentials",
            "description": "Test your knowledge of Lua programming language fundamentals including its unique features, syntax, and common use cases. This quiz covers core concepts necessary for scripting with Lua in various environments.",
            "questions": [
                {
                    "text": "What is the primary data structure in Lua?",
                    "hint": "This versatile structure can represent arrays, dictionaries, objects, and more.",
                    "option1": "Dictionary",
                    "option2": "Array",
                    "option3": "Table",
                    "option4": "List",
                    "solution": "3"
                },
                {
                    "text": "Which keyword is used to define a function in Lua?",
                    "hint": "Functions are first-class values in Lua.",
                    "option1": "function",
                    "option2": "def",
                    "option3": "func",
                    "option4": "procedure",
                    "solution": "1"
                },
                {
                    "text": "What does the '#' operator do when used with a table in Lua?",
                    "hint": "It's useful for sequential tables/arrays.",
                    "option1": "Creates a hash of the table",
                    "option2": "Returns the length of a sequence",
                    "option3": "Comments out the table",
                    "option4": "Creates a copy of the table",
                    "solution": "2"
                },
                {
                    "text": "What is the result of 'nil and true' in Lua?",
                    "hint": "Logical operators in Lua don't always return booleans.",
                    "option1": "true",
                    "option2": "false",
                    "option3": "nil",
                    "option4": "error",
                    "solution": "3"
                },
                {
                    "text": "How are comments written in Lua?",
                    "hint": "Lua supports single-line and multi-line comments.",
                    "option1": "// Comment",
                    "option2": "/* Comment */",
                    "option3": "-- Comment",
                    "option4": "# Comment",
                    "solution": "3"
                },
                {
                    "text": "Which statement is used to include code from another file in Lua?",
                    "hint": "This function loads and executes Lua code.",
                    "option1": "include(\"file\")",
                    "option2": "require(\"file\")",
                    "option3": "import \"file\"",
                    "option4": "using \"file\"",
                    "solution": "2"
                },
                {
                    "text": "What is the scope of a variable defined without the 'local' keyword in Lua?",
                    "hint": "Variable scope in Lua is determined by specific keywords.",
                    "option1": "Function scope",
                    "option2": "Block scope",
                    "option3": "Global scope",
                    "option4": "Module scope",
                    "solution": "3"
                },
                {
                    "text": "Which feature does Lua use for object-oriented programming?",
                    "hint": "Lua doesn't have classes but uses another mechanism for OOP.",
                    "option1": "Classes and inheritance",
                    "option2": "Prototypes",
                    "option3": "Interfaces",
                    "option4": "Metatables",
                    "solution": "4"
                }
            ]
        }
    ],
    "Objective-C": [
        {
            "name": "Objective-C for Apple Platform Development",
            "description": "Test your knowledge of Objective-C programming language concepts including its syntax, memory management, and object-oriented features. This quiz covers fundamental concepts for developing applications for macOS and iOS using Objective-C.",
            "questions": [
                {
                    "text": "What character prefix is typically used for instance variables in Objective-C?",
                    "hint": "This naming convention helps distinguish instance variables.",
                    "option1": "@",
                    "option2": "_",
                    "option3": "$",
                    "option4": "&",
                    "solution": "2"
                },
                {
                    "text": "Which directive is used to import class interfaces in Objective-C?",
                    "hint": "This tells the compiler to include another file's interface.",
                    "option1": "#include",
                    "option2": "#import",
                    "option3": "#using",
                    "option4": "#require",
                    "solution": "2"
                },
                {
                    "text": "What is the correct syntax for declaring a property in Objective-C?",
                    "hint": "Properties need specific attributes in their declaration.",
                    "option1": "@property int count;",
                    "option2": "@property(nonatomic, strong) NSString *name;",
                    "option3": "property NSString *name;",
                    "option4": "@synthesize NSString *name;",
                    "solution": "2"
                },
                {
                    "text": "Which symbol is used to send a message to an object in Objective-C?",
                    "hint": "This is used for method invocation in Objective-C's unique syntax.",
                    "option1": ".",
                    "option2": "->",
                    "option3": "::",
                    "option4": "[and]",
                    "solution": "4"
                },
                {
                    "text": "What does ARC stand for in Objective-C development?",
                    "hint": "This feature was introduced to simplify memory management.",
                    "option1": "Automatic Reference Counting",
                    "option2": "Array Resource Control",
                    "option3": "Apple Runtime Compiler",
                    "option4": "Abstract Resource Creation",
                    "solution": "1"
                },
                {
                    "text": "Which class is the root class of most Objective-C class hierarchies?",
                    "hint": "Most classes inherit from this base class.",
                    "option1": "Object",
                    "option2": "NSBase",
                    "option3": "NSObject",
                    "option4": "ObjCBase",
                    "solution": "3"
                },
                {
                    "text": "What is the purpose of a category in Objective-C?",
                    "hint": "It's related to extending existing classes.",
                    "option1": "To create a subclass with additional functionality",
                    "option2": "To add methods to an existing class without subclassing",
                    "option3": "To define a protocol that classes must implement",
                    "option4": "To group related classes together",
                    "solution": "2"
                },
                {
                    "text": "Which method is automatically called when an Objective-C object is created?",
                    "hint": "This is similar to a constructor in other languages.",
                    "option1": "new",
                    "option2": "alloc",
                    "option3": "init",
                    "option4": "create",
                    "solution": "3"
                }
            ]
        }
    ],
    "SQL": [
        {
            "name": "SQL Database Query Language Essentials",
            "description": "Test your knowledge of Structured Query Language basics including data manipulation, queries, and database concepts. This quiz covers fundamental SQL commands and techniques essential for working with relational databases.",
            "questions": [
                {
                    "text": "Which SQL command is used to retrieve data from a database?",
                    "hint": "This is the most commonly used SQL command for querying.",
                    "option1": "GET",
                    "option2": "FIND",
                    "option3": "EXTRACT",
                    "option4": "SELECT",
                    "solution": "4"
                },
                {
                    "text": "Which SQL clause is used to filter records?",
                    "hint": "This clause specifies a condition that must be met for rows to be included.",
                    "option1": "WHERE",
                    "option2": "HAVING",
                    "option3": "FILTER",
                    "option4": "CONDITION",
                    "solution": "1"
                },
                {
                    "text": "What does the SQL JOIN clause do?",
                    "hint": "This relates to combining rows from different tables.",
                    "option1": "Combines two separate databases",
                    "option2": "Combines rows from two or more tables based on a related column",
                    "option3": "Combines multiple queries into one result",
                    "option4": "Joins multiple conditions in a WHERE clause",
                    "solution": "2"
                },
                {
                    "text": "Which SQL function returns the number of rows matching a specific criterion?",
                    "hint": "This is a common aggregate function used for counting records.",
                    "option1": "SUM",
                    "option2": "TOTAL",
                    "option3": "COUNT",
                    "option4": "NUM",
                    "solution": "3"
                },
                {
                    "text": "Which SQL statement is used to add new data to a database?",
                    "hint": "This command adds new records to a table.",
                    "option1": "ADD",
                    "option2": "INSERT",
                    "option3": "UPDATE",
                    "option4": "CREATE",
                    "solution": "2"
                },
                {
                    "text": "What is a primary key in SQL?",
                    "hint": "This relates to uniquely identifying records in a table.",
                    "option1": "The first column in any table",
                    "option2": "A column or combination of columns that uniquely identifies each row",
                    "option3": "The main table in a database",
                    "option4": "The table that contains the most data",
                    "solution": "2"
                },
                {
                    "text": "Which SQL command is used to modify existing records?",
                    "hint": "This command changes data that already exists in a table.",
                    "option1": "MODIFY",
                    "option2": "ALTER",
                    "option3": "CHANGE",
                    "option4": "UPDATE",
                    "solution": "4"
                },
                {
                    "text": "What does the SQL GROUP BY statement do?",
                    "hint": "It's used with aggregate functions for grouped analysis.",
                    "option1": "Groups multiple SQL statements together",
                    "option2": "Arranges identical data into groups",
                    "option3": "Groups the result set by one or more columns",
                    "option4": "Creates groups of tables in the database",
                    "solution": "3"
                }
            ]
        }
    ],
    "Bash": [
        {
            "name": "Bash Shell Scripting Fundamentals",
            "description": "Test your knowledge of Bash shell scripting including command syntax, variables, and file operations. This quiz covers essential concepts for writing effective shell scripts for Unix-like operating systems.",
            "questions": [
                {
                    "text": "Which symbol is used to access the value of a variable in Bash?",
                    "hint": "This prefix is required to reference a variable's value.",
                    "option1": "@",
                    "option2": "$",
                    "option3": "%",
                    "option4": "!",
                    "solution": "2"
                },
                {
                    "text": "How do you assign a value to a variable in Bash?",
                    "hint": "Variable assignment has specific syntax requirements.",
                    "option1": "var = value",
                    "option2": "var := value",
                    "option3": "var=value",
                    "option4": "set var value",
                    "solution": "3"
                },
                {
                    "text": "Which command is used to make a Bash script executable?",
                    "hint": "This changes the file permissions to allow execution.",
                    "option1": "chmod +x filename",
                    "option2": "execute filename",
                    "option3": "run filename",
                    "option4": "exec filename",
                    "solution": "1"
                },
                {
                    "text": "What is the shebang line in a Bash script?",
                    "hint": "This is typically the first line of a script.",
                    "option1": "A comment describing the script",
                    "option2": "A line that begins with #! specifying the interpreter",
                    "option3": "A line that imports external libraries",
                    "option4": "A line that defines script variables",
                    "solution": "2"
                },
                {
                    "text": "Which operator tests if a file exists in Bash?",
                    "hint": "This is used in conditional statements to check file existence.",
                    "option1": "-a",
                    "option2": "-x",
                    "option3": "-f",
                    "option4": "-e",
                    "solution": "3"
                },
                {
                    "text": "How do you define a function in Bash?",
                    "hint": "Functions allow grouping commands for reuse.",
                    "option1": "function name { commands }",
                    "option2": "def name() { commands }",
                    "option3": "procedure name { commands }",
                    "option4": "sub name { commands }",
                    "solution": "1"
                },
                {
                    "text": "What does the 'grep' command do in Bash?",
                    "hint": "It's a commonly used text processing tool.",
                    "option1": "Sorts file contents",
                    "option2": "Counts lines in a file",
                    "option3": "Searches for patterns in text",
                    "option4": "Removes duplicate lines from a file",
                    "solution": "3"
                },
                {
                    "text": "Which symbol is used for command substitution in Bash?",
                    "hint": "This allows the output of a command to become part of another command.",
                    "option1": "< >",
                    "option2": "[ ]",
                    "option3": "{ }",
                    "option4": "$( )",
                    "solution": "4"
                }
            ]
        }
    ]
}